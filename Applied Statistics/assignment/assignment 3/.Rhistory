sapply(df, table)/nrow(df) * 100
sapply(df, table)/nrow(df)
sapply(df$churn, table)/nrow(df) * 100
sapply(df$churn, table)/nrow(df)
View(df)
data.frame(round(prop.table(table(df)) * 100, 2))
data.frame(round(prop.table(table(df$churn)) * 100, 2))
a = data.frame(round(prop.table(table(df$churn)) * 100, 2))
View(a)
a$Var1 = "churn"
a
a = data.frame(round(prop.table(table(df$churn)) * 100, 2))
colnames(a)[1] = "churn"
a
churn_table = data.frame(round(prop.table(table(df$churn)) * 100, 2))
colnames(churn_table)[1] = "churn"
churn_table
churn_table = data.frame(round(prop.table(table(full_customer_dataset$churn)) * 100, 2))
colnames(churn_table)[1] = "churn"
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges" & cols_list != "monthlycharges"]
df = subset(df, select=c(cols))
cols_list = colnames(df)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges" & cols_list != "monthlycharges"]
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges" & cols_list != "churn"]
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges" & cols_list != "churn"]
df = subset(df, select=c(cols))
churn_table = data.frame(round(prop.table(table(full_customer_dataset$churn)) * 100, 2))
colnames(churn_table)[1] = "churn"
for (col in cols){
df2 = data.frame(round(prop.table(table(df$churn)) * 100, 2))
colnames(df)[1] = col
bothdfs = rbind(churn_table, df2)
}
bothdfs
for (col in cols){
df2 = data.frame(round(prop.table(table(df2$col)) * 100, 2))
colnames(df)[1] = col
bothdfs = rbind(churn_table, df2)
}
bothdfs
for (col in cols){
df2 = data.frame(round(prop.table(table(df$col)) * 100, 2))
colnames(df)[1] = col
bothdfs = rbind(churn_table, df2)
}
bothdfs
for (col in cols){
df2 = data.frame(round(prop.table(table(col)) * 100, 2))
colnames(df)[1] = col
bothdfs = rbind(churn_table, df2)
}
for (col in cols){
print(df$col)
df2 = data.frame(round(prop.table(table(df$col)) * 100, 2))
colnames(df)[1] = col
bothdfs = rbind(churn_table, df2)
}
df2 = data.frame(round(prop.table(table(df[col])) * 100, 2))
for (col in cols){
df2 = data.frame(round(prop.table(table(df[col])) * 100, 2))
colnames(df)[1] = col
bothdfs = rbind(churn_table, df2)
}
View(churn_table)
churn_table = data.frame(round(prop.table(table(full_customer_dataset$churn)) * 100, 2))
colnames(churn_table)[1] = "churn"
churn_gender = data.frame(round(prop.table(table(full_customer_dataset$gender)) * 100, 2))
colnames(churn_gender)[1] = "gender"
churn_internetservice = data.frame(round(prop.table(table(full_customer_dataset$internetservice)) * 100, 2))
colnames(churn_internetservice)[1] = "internetservice"
churn_partner = data.frame(round(prop.table(table(full_customer_dataset$partner)) * 100, 2))
colnames(churn_partner)[1] = "partner"
churn_paymentmethod = data.frame(round(prop.table(table(full_customer_dataset$paymentmethod)) * 100, 2))
colnames(churn_paymentmethod)[1] = "paymentmethod"
bothdfs = rbind(churn_table, churn_gender)
DFtranspose <- cbind(t(churn_table[2, ]), t(churn_gender))
rownames(DFtranspose) <- churn_table[1, ]
DFtranspose
DFtranspose <- cbind(t(churn_table[1, ]), t(churn_gender))
rownames(DFtranspose) <- churn_table[1, ]
DFtranspose
churn_table[1, ]
churn_table[1, ]
churn_table[2, ]
churn_table
churn_table['test'] = 0
churn_gender['test'] = 0
bothdfs = rbind(churn_table, churn_gender)
churn_table = churn_table['test'] = 0
churn_gender = churn_gender['test'] = 0
bothdfs = rbind(churn_table, churn_gender)
bothdfs
churn_table
churn_table = data.frame(round(prop.table(table(full_customer_dataset$churn)) * 100, 2))
colnames(churn_table)[1] = "churn"
churn_gender = data.frame(round(prop.table(table(full_customer_dataset$gender)) * 100, 2))
colnames(churn_gender)[1] = "gender"
churn_internetservice = data.frame(round(prop.table(table(full_customer_dataset$internetservice)) * 100, 2))
colnames(churn_internetservice)[1] = "internetservice"
churn_partner = data.frame(round(prop.table(table(full_customer_dataset$partner)) * 100, 2))
colnames(churn_partner)[1] = "partner"
churn_paymentmethod = data.frame(round(prop.table(table(full_customer_dataset$paymentmethod)) * 100, 2))
colnames(churn_paymentmethod)[1] = "paymentmethod"
churn_table['test'] = 0
churn_table
churn_gender['test'] = 0
bothdfs = rbind(churn_table, churn_gender)
df['test'] = 0
ddply(data,.(test),
function(x) with(x,
data.frame(100*round(table(churn)/length(churn),2))))
ddply(data,.(churn),
function(x) with(x,
data.frame(100*round(table(churn)/length(churn),2))))
df$test = as.factor(df$test)
View(df)
ddply(data,.(churn),
function(x) with(x,
data.frame(100*round(table(churn)/length(churn),2))))
sapply(df, table)/nrow(df) * 100
sapply(df$churn, table)/nrow(df)
dcast(df, test ~ churn, fun.aggregate = length)
dcast(df, test ~ df$churn, fun.aggregate = length)
d2 = dcast(df, test ~ df$churn, fun.aggregate = length)
d2[,-1] <- 100 * d2[,-1]/colSums(d2[,-1])[col(d2[,-1])]
d2 = dcast(df, test ~ df$churn, fun.aggregate = length)
library(reshape2)
d2 = dcast(df, test ~ df$churn, fun.aggregate = length)
d2[,-1] <- 100 * d2[,-1]/colSums(d2[,-1])[col(d2[,-1])]
d2 = dcast(df, var01 ~ iclass, fun.aggregate = length)
d2 = dcast(df, test ~ iclass, fun.aggregate = length)
d2[,-1] <- 100 * d2[,-1]/colSums(d2[,-1])[col(d2[,-1])]
d2 = dcast(df, churn ~ iclass, fun.aggregate = length)
df = full_customer_dataset
cols_list = colnames(df)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges"]
df = subset(df, select=c(cols))
df %>%
pivot_longer(everything()) %>%
count(name, value) %>%
arrange(name, desc(value))
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges" & cols_list != "churn"]
df = subset(df, select=c(cols))
df %>%
pivot_longer(everything()) %>%
count(name, value) %>%
arrange(name, desc(value))
library(tidyr)
library(dplyr)
df %>%
pivot_longer(everything()) %>%
count(name, value) %>%
arrange(name, desc(value))
df %>%
pivot_longer(everything()) %>%
count(name, value) %>%
arrange(name, desc(value))
m1 = lm(churn ~ .)
m1 = lm(churn ~ ., data = full_customer_dataset)
m1
# is there a difference in means?
anovatab(m1)
plot(m1)
# is there a difference in means?
anovatab(m1)
# assess model
summary(m1)
df = full_customer_dataset
cols_list = colnames(df)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges" & cols_list != "churn"]
df = subset(df, select=c(cols))
m1 = lm(churn ~ ., data = df)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges"]
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges"]
df = subset(df, select=c(cols))
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges"]
df = subset(df, select=c(cols))
df = full_customer_dataset
cols_list = colnames(df)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges"]
df = subset(df, select=c(cols))
m1 = lm(churn ~ ., data = df)
m1
# is there a difference in means?
anovatab(m1)
plot(m1)
drop1(m1,test='F')
dcast(df, churn ~ test, value.var = "Result")
dcast(df, churn ~ test, fun.aggregate = length)
df
dcast(df, cols ~ cols, fun.aggregate = length)
dcast(df, cols ~ cols, value.var = "Result")
dcast(df, cols + cols~ cols, fun.aggregate = length)
dcast(df, churn  ~ cols, fun.aggregate = length)
dcast(df, churn + paymentmethod  ~ cols, fun.aggregate = length)
cols
dcast(df, churn + paymentmethod + gender + internetservice + partner ~ cols, fun.aggregate = length)
dcast(df, churn + paymentmethod ~ cols, fun.aggregate = length)
d2 = dcast(df, churn ~ cols, fun.aggregate = length)
d2[,-1] <- 100 * d2[,-1]/colSums(d2[,-1])[col(d2[,-1])]
d2
d2 = dcast(df, churn ~ cols, fun.aggregate = length)
d2[,-1] = round(100 * d2[,-1]/colSums(d2[,-1])[col(d2[,-1])],2)
d2
d2 = dcast(df, cols ~ cols, fun.aggregate = length)
d2[,-1] = round(100 * d2[,-1]/colSums(d2[,-1])[col(d2[,-1])],2)
d2
cols
d2 = dcast(df, churn + gender+internetservice+partner+paymentmethod ~ cols, fun.aggregate = length)
d2[,-1] = round(100 * d2[,-1]/colSums(d2[,-1])[col(d2[,-1])], 2)
d2
d2 = dcast(df, churn + gender+internetservice+partner+paymentmethod ~ cols, fun.aggregate = length)
d2
d2[,-1] = round(100 * d2[,-1]/colSums(d2[,-1])[col(d2[,-1])], 2)
d2 = dcast(df, churn + gender+internetservice+partner+paymentmethod ~ cols, fun.aggregate = length)
d2
d2[,-1] = round(100 * d2[,-1]/colSums(d2[,-1])[col(d2[,-1])], 2)
churn_table = data.frame(round(prop.table(table(full_customer_dataset$churn)) * 100, 2))
colnames(churn_table)[1] = "churn"
churn_table
d2 = dcast(df, churn + gender~ cols, fun.aggregate = length)
d2
churn_table
churn_table = data.frame(round(prop.table(table(full_customer_dataset$churn)) * 100, 2))
colnames(churn_table)[1] = "values"
churn_table['column_name'] = "churn"
churn_table
churn_table = data.frame(round(prop.table(table(full_customer_dataset$churn)) * 100, 2))
colnames(churn_table)[1] = "values"
churn_table['column_name'] = "churn"
gender_table = data.frame(round(prop.table(table(full_customer_dataset$gender)) * 100, 2))
colnames(gender_table)[1] = "values"
gender_table['column_name'] = "churn"
internetservice_table = data.frame(round(prop.table(table(full_customer_dataset$internetservice)) * 100, 2))
colnames(internetservice_table)[1] = "values"
internetservice_table['column_name'] = "internetservice"
partner_table = data.frame(round(prop.table(table(full_customer_dataset$partner)) * 100, 2))
colnames(partner_table)[1] = "values"
partner_table['column_name'] = "partner"
paymentmethod_table = data.frame(round(prop.table(table(full_customer_dataset$paymentmethod)) * 100, 2))
colnames(paymentmethod_table)[1] = "values"
paymentmethod_table['column_name'] = "paymentmethod"
bothdfs = rbind(churn_table, gender_table)
bothdfs
churn_table = data.frame(round(prop.table(table(full_customer_dataset$churn)) * 100, 2))
colnames(churn_table)[1] = "values"
churn_table['column_name'] = "churn"
gender_table = data.frame(round(prop.table(table(full_customer_dataset$gender)) * 100, 2))
colnames(gender_table)[1] = "values"
gender_table['column_name'] = "gender"
internetservice_table = data.frame(round(prop.table(table(full_customer_dataset$internetservice)) * 100, 2))
colnames(internetservice_table)[1] = "values"
internetservice_table['column_name'] = "internetservice"
partner_table = data.frame(round(prop.table(table(full_customer_dataset$partner)) * 100, 2))
colnames(partner_table)[1] = "values"
partner_table['column_name'] = "partner"
paymentmethod_table = data.frame(round(prop.table(table(full_customer_dataset$paymentmethod)) * 100, 2))
colnames(paymentmethod_table)[1] = "values"
paymentmethod_table['column_name'] = "paymentmethod"
bothdfs = rbind(churn_table, gender_table)
bothdfs
a = function(df, columns){
for (col in cols){
print(col)
churn_table = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(churn_table)[1] = "values"
churn_table['column_name'] = col
}
tmp = 0
bothdfs = rbind(df, tmp)
}
a(df, cols)
a = function(df, columns){
for (col in cols){
print(col)
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
tmp_df['column_name'] = col
bothdfs = rbind(df, tmp_df)
}
return(bothdfs)
}
a(df, cols)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges" & cols_list != "churn"]
churn_table = data.frame(round(prop.table(table(full_customer_dataset$churn)) * 100, 2))
colnames(churn_table)[1] = "values"
churn_table['column_name'] = "churn"
churn_table
a(churn_table, cols)
a = function(df, columns){
bothdfs = df
for (col in cols){
print(col)
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
tmp_df['column_name'] = col
bothdfs = rbind(df, tmp_df)
}
return(bothdfs)
}
a(churn_table, cols)
a = function(df, columns){
df_list = list()
for (i in length(columns)){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
tmp_df['column_name'] = columns[i]
df_list[[i]] = tmp_df
}
bothdfs = do.call(rbind, df_list)
return(bothdfs)
}
a(churn_table, cols)
a = function(df, columns){
df_list = list()
for (i in length(columns)){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
print(columns[i])
tmp_df['column_name'] = columns[i]
df_list[[i]] = tmp_df
}
bothdfs = do.call(rbind, df_list)
return(bothdfs)
}
a(churn_table, cols)
print(length(columns))
a = function(df, columns){
df_list = list()
for (i in length(columns)){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
print(length(columns))
tmp_df['column_name'] = columns[i]
df_list[[i]] = tmp_df
}
bothdfs = do.call(rbind, df_list)
return(bothdfs)
}
a(churn_table, cols)
a = function(df, columns){
df_list = list()
for (i in length(columns)){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
print(length(columns))
tmp_df['column_name'] = columns[i]
df_list[[i]] = tmp_df
}
print(df_list)
bothdfs = do.call(rbind, df_list)
return(bothdfs)
}
a(churn_table, cols)
a = function(df, columns){
df_list = list()
for (i in length(columns)){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[col])) * 100, 2))
colnames(tmp_df)[1] = "values"
print(length(columns))
tmp_df['column_name'] = columns[i]
df_list[[i]] = tmp_df
}
print(df_list)
bothdfs = do.call(rbind, df_list)
return(bothdfs)
}
a(churn_table, cols)
a = function(df, columns){
df_list = list()
i=1
for (col in cols){
print(col)
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
tmp_df['column_name'] = col
df_list[[i]] = tmp_df
i=i+1
}
bothdfs = do.call(rbind, df_list)
return(bothdfs)
}
a = function(columns){
df_list = list()
i=1
for (col in cols){
print(col)
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
tmp_df['column_name'] = col
df_list[[i]] = tmp_df
i=i+1
}
bothdfs = do.call(rbind, df_list)
return(bothdfs)
}
a(cols)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges"]
a = function(columns){
df_list = list()
i=1
for (col in cols){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
tmp_df['column_name'] = col
df_list[[i]] = tmp_df
i=i+1
}
final_df = do.call(rbind, df_list)
return(final_df)
}
combine_dfs_freq_table = function(columns){
df_list = list()
i=1
for (col in cols){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "values"
tmp_df['column_name'] = col
df_list[[i]] = tmp_df
i=i+1
}
final_df = do.call(rbind, df_list)
return(final_df)
}
table_df = combine_dfs_freq_table(cols)
table_df
kbl(data) %>%
kable_classic(full_width = F)
kbl(table_df) %>%
kable_classic(full_width = F)
combine_dfs_freq_table = function(columns){
df_list = list()
i=1
for (col in cols){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "Values"
tmp_df['Column Name'] = col
df_list[[i]] = tmp_df
i=i+1
}
final_df = do.call(rbind, df_list)
return(final_df)
}
table_df = combine_dfs_freq_table(cols)
kbl(table_df) %>%
kable_classic(full_width = F)
combine_dfs_freq_table = function(columns){
df_list = list()
i=1
for (col in cols){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "Values"
tmp_df['Column Name'] = col
df_list[[i]] = tmp_df
i=i+1
}
final_df = do.call(rbind, df_list)
colnames(final_df)[2] = "% of column"
final_df = final_df %>% relocate('Column Name', .before = `% of column`)
return(final_df)
}
df = full_customer_dataset
cols_list = colnames(df)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges"]
df = subset(df, select=c(cols))
table_df = combine_dfs_freq_table(cols)
kbl(table_df) %>%
kable_classic(full_width = F)
combine_dfs_freq_table = function(columns){
df_list = list()
i=1
for (col in cols){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "Values"
tmp_df['Column Name'] = col
df_list[[i]] = tmp_df
i=i+1
}
final_df = do.call(rbind, df_list)
colnames(final_df)[2] = "% Representation of Column"
final_df = final_df %>% relocate('Column Name', .before = `% Representation of Column`)
return(final_df)
}
df = full_customer_dataset
cols_list = colnames(df)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges"]
df = subset(df, select=c(cols))
table_df = combine_dfs_freq_table(cols)
kbl(table_df) %>%
kable_classic(full_width = F)
combine_dfs_freq_table = function(columns){
df_list = list()
i=1
for (col in cols){
tmp_df = data.frame(round(prop.table(table(full_customer_dataset[[col]])) * 100, 2))
colnames(tmp_df)[1] = "Values"
tmp_df['Column Name'] = col
df_list[[i]] = tmp_df
i=i+1
}
final_df = do.call(rbind, df_list)
colnames(final_df)[2] = "% Representation of Column"
final_df = final_df %>% relocate('Column Name', .before = "Values")
return(final_df)
}
df = full_customer_dataset
cols_list = colnames(df)
cols = cols_list[cols_list != "customerid" & cols_list != "monthlycharges"]
df = subset(df, select=c(cols))
table_df = combine_dfs_freq_table(cols)
kbl(table_df) %>%
kable_classic(full_width = F)
